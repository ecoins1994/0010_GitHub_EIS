//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//							Struct for 74HC595
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
struct RT_HW_STRUCT_74HC595_ID{ 
char	 mi='S';			//--Тип интерфейса -SPI->'S', SSPI->'s';
uint32_t clock=4000000;		//--
uint8_t  sspiDivider=0;
uint8_t  dir=0;				//--Этапы управления;
uint8_t  custom=0;
uint8_t	 bus=0;				//--SPI->номер шины SPI;
uint8_t  sck=255;			//--Номер пина sck;
uint8_t  mosi=255;			//--Номер пина mosi;
uint8_t  cs=255;			//--Номер пина cs;
uint8_t  run:1;	//--Флаги;
uint8_t  qnt=1;				//--Кол-во чипов;
uint8_t	 codeErr;			//--Код ошибки;
uint32_t timePeriod;		//--Рабочий регистр для измерения периода опроса;
uint16_t rawData;			//--Регистр для чтения данных;
};
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//							Struct for MCP23x17
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
struct  RT_HW_STRUCT_MCP23x17_ID{   		  
uint8_t  dir=0;					//--Управление этапами управления в функции direct();
uint8_t  step;					//--Управление этапами управления во внешней функции;
char     mi='I';  				//--'I'->i2c; 'S'->SPI; 's'->SPI;
uint8_t  bus=0;					//--Номер шины;
uint8_t  adr=0x20;				//--Адрес i2c; 
uint8_t  sck=255; uint8_t  mosi=255; uint8_t miso=255; //--SSPI->sck,mosi,miso;
uint8_t  cs=255; 				//--SPI,SSPI->scs;
uint8_t  periodMin=10;			//--Минимальный период ввода/вывода (чтобы не перегружать шину i2c);
uint32_t speed=400000;		    //--для i2c-speed; SPI-speed(clock); SSPI-spped(time);
uint8_t  codeErr;				//--Код ошибки;
uint8_t  qntMaxErr=5;			//--Максимальное кол-во повторяемых ошибок;
uint8_t  cnt;					//--Рабочий счетчик;
uint32_t timeDelay;				//--Используется функцией timeDelay(timeBegin,stepDelay,sizeDelay);
uint8_t  stepDelay;				//--Используется функцией timeDelay();
uint16_t sizeDelay;				//--Вычисляемая задержка для функции timeDelay();
uint8_t  fresh;
uint8_t  ok:1,err:1,action:1;	//--Флаги;
//-------------------------------------------------------------------------------------------------
uint8_t  cnfgA=0xFF;			//--Побитовая конфигурация регистров А (0-вывод, 1-ввод);
uint8_t  cnfgB=0xFF;			//--Побитовая конфигурация регистров B (0-вывод, 1-ввод);
uint8_t  cnfgIPOLA=0x00;		//--Побитовая конфигурация инверсии входов регистра A(0-без инверсии,1-инверсия);
uint8_t  cnfgIPOLB=0x00;		//--Побитовая конфигурация инверсии входов регистра B(0-без инверсии,1-инверсия);
uint8_t  cnfgGPPUA=0x00;		//--Побитовая конфигурация подтяжки входов регистра A(0-без подтяжки,1-внутреннйи резистор 100ком к Vcc);
uint8_t  cnfgGPPUB=0x00;		//--Побитовая конфигурация подтяжки входов регистра A(0-без подтяжки,1-внутреннйи резистор 100ком к Vcc);
uint8_t  runIn; uint8_t runOut;	//--
uint8_t  inA=0;  				//--Буфер для чтения   из регистра A;
uint8_t  inB=0;  				//--Буфер для чтения   из регистра B;
uint8_t  outA,outB,agoA,agoB; 	//--Буферы для записи   в регистры A,B;
};
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//									MCP4725 (i2c->DAC)
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
struct RT_HW_STRUCT_MCP4725_ID{ 
uint8_t  dir=0;					//--Управление этапами управления в функции direct();
uint8_t  step;					//--Управление этапами управления во внешней функции;
uint8_t  bus=0;					//--Номер шины;
uint8_t  adr=0x62;				//--Адрес i2c по умолчанию;
uint32_t speed;					//--Для i2c-speed; SPI-speed(clock); SSPI-spped(time);
uint8_t  codeErr;				//--Код ошибки при обмене;
uint8_t  qntMaxErr=5;			//--Максимальное кол-во повторяемых ошибок;
uint8_t  cnt;					//--Рабочий счетчик;
uint32_t timeBegin;				//--Используется функцией timeDelay(timeBegin,stepDelay,sizeDelay);
uint8_t  stepDelay;			    //--Используется функцией timeDelay(timeBegin,stepDelay,sizeDelay);
uint16_t sizeDelay;				//--Вычисляемая задержка для функции timeDelay(),используется также для поиска на шине i2c;	
uint8_t  run=0;					//--Флаг запуска измерения;
uint8_t  fresh:1,ok:1,action:1,err:1,vEEPROM:1;	//--Флаги;
int16_t  vDAC;					//--Измеренное значения;
};
//=================================================================================================