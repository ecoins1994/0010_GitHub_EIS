//=================================================================================================
//						1.Структуры для диспетчера планирования задач
//=================================================================================================
struct RT_HW_STRUCT_SHAD  	{uint8_t  num=0,cnt=0,qnt=5;};	//--Регистры диспетчера (;
struct RT_HW_STRUCT_SHED  	{
RT_HW_STRUCT_SHAD quick, fast, slow, back, frdm;//--параметры по типам задач: 
												//  1) num=номер задачи как событие; 
												//  2) cnt=текущий счетчик задач(рабочий параметр);
												//  3) qnt=максимальное кол-во задач;
uint8_t  ready=0;                              	//--Флаг запуска ready; 
uint8_t  control=1,blink10=1,blink25=1,blink50=1,blink100=1,blink250=1,blink500=1,blinkSec=1; 
uint8_t  eventSec=1;
uint8_t  event=0,run=0; 
uint32_t cycle; 								//--Кол-во циклов loop()      в сек;
uint16_t smallCycle;    						//--Кол-во циклов loop()/1000 в сек;
uint32_t cntSec=0;								//--Счетчик секунд с начала запуска программы;
uint32_t cntCycle=0;    						//--Счетчик для расчета кол-во циклов loop();
uint32_t timeStart10=0, timeStart25=0;  		//--Рабочие таймеры для периодов 10 и 25мс; 
uint8_t  workSec;
uint8_t  cnt50=0, cnt100=0, cnt250=0; 
uint8_t  initParam=0;
};  	
//=================================================================================================
//                  	2.Структура управления задачами
// Работает совместно с функциями directTask и при необходимости с SetTaskID
//	(uint8_t)periodLimit - ограничение частоты вызова в циклах вхождения в функцию [режимы С,A]; default=5;
//  (uint16_t)periodTask - период вызова в мс [режимы P,T,A] default=1000;
//  Режимы запуска: 
//	 'C'-запуск по внешним условиям(например изменения входных параметров для расширителя) 
//       с ограничением частоты вызова в циклах вызова функции[periodLimit];
//   'P'-периодический безусловный запуск;       
//   'T'-периодический запуск по внешним условиям(как в режиме 'C')
//	 'A'-запуск по внешним условиям(как в режиме'C') или периодически 
//       (обычно с большим периодом для повышения устойчивости проекта); 		
//   'Q'-запуск в каждом цикле по внешним условиям (для быстрых процессов и для тестирования);
//   'E'-запуск в каждом цикле. Может быть использован для управления через вход EN, 
//       в т.ч. для периодического вызова события=1 на входе EN;
//   'F'-однократное выполнение. Для повтора можно установить id.first=1;
//
//   'N'-запуск отключен;
//  Вход:
//  run-может устанавливаться внешней функцией. run=5 -означает, что функция запущена на выполнение;
//  Выходы:
//  run-  =0 нет запуска; 
//        =1 безусловный запуск; 
//        =2 будет запуск проверке условий  внешней функции (например по изменению выводимого параметра);
//=================================================================================================
struct RT_HW_STRUCT_SHED_TASK{                    //--Управление задачами полный
uint8_t  custom=0;    
char    mode='C'; 				//--Режим задачи: 
uint16_t period=1000; 
uint16_t Period=2500; 		//--Период
uint8_t  cntLimit=0;  uint8_t periodLimit=5; 
uint8_t  first=1;								//--Флаг первого запуска;     
uint8_t  agoEN=1;  uint8_t extEN=1;  uint8_t run=0;     
uint32_t timeBegin; 
uint32_t TimeBegin;       
};
//=================================================================================================
//                  	3.Структура для функции динамической задержки 
//=================================================================================================
struct RT_HW_STRUCT_TIME{                    
uint32_t startTime,curTime;		//--Переменные для работы со временем;
uint16_t sizeDelay;				//--Время задержки;
uint8_t  state=0;				//--Состояние функции (1 - ожидание завершение задержки);
uint8_t  pointTime; 			//--Точка возрата из функции(для пользовательского использования);
};
//=================================================================================================
