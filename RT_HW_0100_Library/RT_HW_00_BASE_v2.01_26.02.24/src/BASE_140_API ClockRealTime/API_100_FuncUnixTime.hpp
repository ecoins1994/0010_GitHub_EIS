
//=================================================================================================
//						1.Получение времени и даты из системных макросов __TIME__ и __DATE__
//						  при компиляции скетча. 
//=================================================================================================
void unixSetSystemTimeDate(){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint16_t unx_year4;
#endif
//-----------------1.1. Получение секунд, минут, часов---------------------------------------------
mess.str=__TIME__;
unixID.seconds=(((mess.str[6]-'0')*10)+(mess.str[7]-'0'));
unixID.minutes=(((mess.str[3]-'0')*10)+(mess.str[4]-'0'));
unixID.hours  =(((mess.str[0]-'0')*10)+(mess.str[1]-'0'));
//-----------------1.2. Получение дня--------------------------------------------------------------
mess.str=__DATE__;
unixID.day  =((((mess.str[4] >= '0') ? (mess.str[4]) : '0')-'0')*10) + (mess.str[5]-'0');																						
//-----------------1.3. Получение месяца-----------------------------------------------------------
unixID.month=1;																							
if((mess.str[0] == 'J') && (mess.str[1] == 'a') && (mess.str[2] == 'n')){unixID.month= 1;}
if((mess.str[0] == 'F'))												{unixID.month= 2;}
if((mess.str[0] == 'M') && (mess.str[1] == 'a') && (mess.str[2] == 'r')){unixID.month= 3;}
if((mess.str[0] == 'A') && (mess.str[1] == 'p'))						{unixID.month= 4;}
if((mess.str[0] == 'M') && (mess.str[1] == 'a') && (mess.str[2] == 'y')){unixID.month= 5;}
if((mess.str[0] == 'J') && (mess.str[1] == 'u') && (mess.str[2] == 'n')){unixID.month= 6;}
if((mess.str[0] == 'J') && (mess.str[1] == 'u') && (mess.str[2] == 'l')){unixID.month= 7;}
if((mess.str[0] == 'A') && (mess.str[1] == 'u'))						{unixID.month= 8;}
if((mess.str[0] == 'S'))												{unixID.month= 9;}
if((mess.str[0] == 'O'))												{unixID.month=10;}
if((mess.str[0] == 'N'))												{unixID.month=11;}
if((mess.str[0] == 'D'))												{unixID.month=12;}
//-----------------1.4. Получение года (2 младших знака)-------------------------------------------
unx_year4=(((mess.str[7]-'0')*1000)+((mess.str[8]-'0')*100)+((mess.str[9]-'0')*10)+(mess.str[10]-'0'));	
unixID.year=unx_year4%100;
//-----------------1.5. Получение дня недели-------------------------------------------------------
unixSetWeekDay();		  
};

//=================================================================================================
//						2.Установка начальных значений 
//                        (функция для тестирования soft)
//=================================================================================================
void unixSetTimeDate(uint8_t vHour, uint8_t vMinute, uint8_t vSecond, uint8_t vDay, uint8_t vMonth, uint8_t vYear){
unixID.hours=vHour; unixID.minutes=vMinute;	unixID.seconds=vSecond;
unixID.day=vDay;    unixID.month=vMonth;	unixID.year=vYear;	
};

//=================================================================================================
//						3. Вспомогательная функция
//=================================================================================================
uint8_t unixGetDim(uint8_t i){return (i < 7) ? ((i == 1) ? 28 : ((i & 1) ? 30 : 31)) : ((i & 1) ? 31 : 30);};

//=================================================================================================
//						4. Установка  даты и времени в UNIX формат
//  Входные параметры: unixID.hours,unixID.minutes,unixID.seconds
//=================================================================================================
void unixSetSTAMP(){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint16_t unx_w0,unx_w1,unx_w2;
  uint8_t  unx_b0;
  uint8_t  unx_idx;
  uint16_t unx_year4;
#endif
//-------------------------------------------------------------------------------------------------
if(abs(unixID.zone)<=12){unx_w2=unixID.zone*60;}	//--Пересчет   параметра сдвига часового пояса в мин; 
else                	{unx_w2=unixID.zone;}		//--Сохранение параметра сдвига часового пояса в мин; 
unx_year4=2000+unixID.year;
unx_b0=(unixID.month >= 3) ? 1 : 0; 
unx_w0=unx_year4 + unx_b0 - 1970;	 
unx_w1=0;
for(unx_idx=0; unx_idx<(unixID.month-1); unx_idx++){unx_w1 += unixGetDim(unx_idx);}
unixID.timeUNIX=(((unixID.day - 1 + unx_w1 + ((unx_w0 + 1) / 4) - ((unx_w0 + 69) / 100) + ((unx_w0 + 369) / 100 / 4) 
            + 365 * (unx_w0-unx_b0)) * 24ul + unixID.hours) * 60ul + unixID.minutes - unx_w2) * 60ul + unixID.seconds;
};

//=================================================================================================
//						5. Установка текущего времени
//=================================================================================================
void unixSetTime(){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint8_t  unx_b0;
  uint32_t unx_d0;
#endif
//-------------------------------------------------------------------------------------------------
unx_d0=unixID.timeUNIX + (3600*unixID.zone);	    			//--UNIX время с учетом часового пояса;
//-------------------------------------------------------------------------------------------------
unixID.seconds = unx_d0 % 60UL; unx_d0 /= 60UL;					//--Сохранение секунд;
unixID.minutes = unx_d0 % 60UL;	unx_d0 /= 60UL;					//--Сохранение минут;
unx_b0         = unx_d0 % 24UL;	unx_d0 /= 24UL;					//--Часы;
if(unx_b0!=unixID.hours){unixID.fresh=unixID.freshHours=1;}		//--Установка флага обновления часов;
unixID.hours=unx_b0;											//--Сохранение часов;
};

//=================================================================================================
//						6. Получение текущего времени в формате uint32_t
//=================================================================================================
uint32_t unixGetTime(){											//--Сохранение часов;
return ((uint32_t)unixID.hours<<16) | ((uint32_t)unixID.minutes<<8) | unixID.seconds; 
};

//=================================================================================================
//						7. Установка  текущей даты 
//=================================================================================================
void unixSetDate(){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint16_t unx_w0,unx_w1,unx_w2;
  uint32_t unx_d0,unx_d1;
#endif
//-------------------------------------------------------------------------------------------------
unx_d0=(unixID.timeUNIX+ 3600*unixID.zone)/86400;	    				//--UNIX время с учетом часового пояса;
//-------------------------------------------------------------------------------------------------
unx_d1=(uint32_t)(((4 * unx_d0 + 102032)/146097) + 15);			//--Промежуточная переменная;
unx_d0=(uint32_t)(      unx_d0 + 2442113 + unx_d1-(unx_d1/4));	//--Промежуточная переменная;
unx_w0=(uint16_t)((20 * unx_d0 - 2442) / 7305);					//--Год   (предварительно);
unx_d1= unx_d0 - (365 * unx_w0) - (unx_w0/4);			    	//--Промежуточная переменная;
unx_w1=(uint8_t)(unx_d1 * 1000 / 30601);						//--Месяц (предварительно);
unx_w2=(uint8_t)(unx_d1 - (unx_w1 * 30) - ((unx_w1*601)/1000));	//--День (предварительно);
if(unx_d1<=13){unx_w0-= 4716; unx_w1-= 1;}						//--Год;
else          {unx_w0-= 4715; unx_w1-= 13;}
//-------------------------------------------------------------------------------------------------
if(unx_w2!=unixID.day){unixID.fresh=unixID.freshDay=1;}								//--Установка флага обновления дня;
unixID.year =unx_w0%100;
unixID.month=unx_w1;
unixID.day  =unx_w2;
//-------------------------------------------------------------------------------------------------
};

//=================================================================================================
//						8. Получение текущего времени в формате uint32_t
//=================================================================================================
uint32_t unixGetDate(){
return 	((uint32_t)(unixID.weekDay)<<24) | ((uint32_t)(unixID.day)<<16) | ((uint32_t)(unixID.month)<<8) | (uint32_t)(unixID.year);
};

//=================================================================================================
//						9. Установка текущего дня недели
//=================================================================================================
void unixSetWeekDay(){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint16_t unx_w0,unx_w1;
  uint8_t  unx_idx;
#endif
//-------------------------------------------------------------------------------------------------
unx_w0=2000+unixID.year; 
if(unx_w0 >= 2000) {unx_w0 -= 2000;}
unx_w1=unixID.day;
for(unx_idx = 1; unx_idx < unixID.month; ++unx_idx){unx_w1 +=unixGetDim(unx_idx - 1);}
if (unixID.month > 2 && unx_w0 % 4 == 0)      {unx_w1++;}
unixID.weekDay=(unx_w1 + 365 * unx_w0 + (unx_w0 + 3) / 4 + 4) % 7 + 1;	
};

//=================================================================================================
//						10. Установка параметров времени
//=================================================================================================
void unixSetTotal(){
unixSetTime();	    											//--Вычисление времени;
if(unixID.freshHours){unixID.freshHours=0; 	unixSetDate();}		//--Вычисление даты;
if(unixID.freshDay)  {unixID.freshDay=0;   	unixSetWeekDay();}	//--Вычисление дня недели;
};

//=================================================================================================
//						11. Инкремент текущего времени
//=================================================================================================
void unixIncTime(){unixID.timeUNIX++;	unixSetTotal();};
//=================================================================================================
//						12.Получение текущего времени и даты, дня недели по дню,месяцу,году
//=================================================================================================
uint8_t unixSetWeekDay(uint8_t d, uint8_t m, uint16_t y){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint8_t  unx_idx;
  uint16_t unx_days;
#endif
//-------------------------------------------------------------------------------------------------
if(y >= 2000) {y -= 2000;}
unx_days = d;
for(unx_idx = 1; unx_idx < m; ++unx_idx){unx_days +=unixGetDim(unx_idx - 1);}
if (m > 2 && y % 4 == 0)                {unx_days++;}
return (unx_days + 365 * y + (y + 3) / 4 + 4) % 7 + 1;	
};

//=================================================================================================
//						13.  Установка строки с текущим временем (длина=8)
//=================================================================================================
void timeMCUtoMess(uint8_t d=0){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint8_t  bf8;
#endif
//-------------------------------------------------------------------------------------------------
mess.str="";
bf8=unixID.hours;   if(bf8>23){bf8=23;} if(bf8<10){mess.str+=String('0');} mess.str+=String(bf8); mess.str+=String(':'); //--Часы;
bf8=unixID.minutes; if(bf8>59){bf8=59;} if(bf8<10){mess.str+=String('0');} mess.str+=String(bf8); mess.str+=String(':'); //--Минуты;
bf8=unixID.seconds; if(bf8>59){bf8=59;} if(bf8<10){mess.str+=String('0');} mess.str+=String(bf8); 					  	  //--Секунды;
bf8=unixID.weekDay;
if(d){mess.str+=String(' '); mess.str+=String(bf8);}
};

//=================================================================================================
//						14.Формирование строки с текущей датой (длина 8 или 10)
// d=0: 01.01.24
// d=1: 01.01.24 1(понедельник)
//=================================================================================================
void dateMCUtoMess(uint8_t d=0){
//-------------------------------------------------------------------------------------------------
//						Определение временных переменных;
//-------------------------------------------------------------------------------------------------
#if !defined(RT_HM_COREM)				//==Если контроллер не многоядерный;
  uint8_t  bf8;
#endif
//-------------------------------------------------------------------------------------------------
mess.str="";
bf8=unixID.day;   if(bf8>31){bf8=31;} if(bf8<10){mess.str+=String('0');} mess.str+=String(bf8); mess.str+=String('.'); //--День;
bf8=unixID.month; if(bf8>12){bf8=12;} if(bf8<10){mess.str+=String('0');} mess.str+=String(bf8); mess.str+=String('.'); //--Месяц;
bf8=unixID.year;  //if(bf8>99){bf8=99;} if(bf8<10){unixID.str+=String('0');} unixID.str+=String(bf8); 					 //--Год;
if(d){mess.str+=String((uint16_t)2000+bf8);}
else {if(bf8<10){mess.str+=String('0');} mess.str+=String(bf8);}
};
//================================================================================================
//void dateMCUtoMess(uint8_t d=0){dateMCUtoMess(mess,d);};	//--Используя структуру RT_HW_BASE.h;
//=================================================================================================

