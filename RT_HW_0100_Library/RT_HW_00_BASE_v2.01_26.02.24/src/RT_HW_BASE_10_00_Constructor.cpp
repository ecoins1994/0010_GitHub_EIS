#include "RT_HW_BASE.h"
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//									КОНСТРУКТОР
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RT_HW_BASE:: RT_HW_BASE(){

//=================================================================================================
//							1.Установка задач диспетчера
//=================================================================================================
  shed.tick.qnt=10;		//--Количество тиковых задач     (период 1ms);
  shed.quick.qnt=5;		//--Количество оперативных задач (период 10ms);
  shed.fast.qnt=4;		//--Количество быстрых задач     (период 25ms);
  shed.slow.qnt=4;		//--Количество медленных задач   (период 100ms);
  shed.back.qnt=5;   	//--Количество фоновых задач     (период 100ms);
  shed.frdm.qnt=50; 	//--Количество медленных задач   (период loop() когда нет на выпонении других задач);
//=================================================================================================
//							2.Установка базовых параметров
//=================================================================================================

//=================================================================================================
//							3.Установка параметров времени 
//=================================================================================================
  unixSetSystemTimeDate();			//--Получение параметра времени компиляции
  unixSetSTAMP();					//--Получение unixTimе из текущей даты;
  unixSetTotal();					//--Получение параметров времени;
//=================================================================================================
//							4.Установка ID контроллера (случайное число)
//=================================================================================================
  board.id=genRandom(32);			//--Генератор ID платы (32-битовое случайное число);
//genMacAddr(device.board.mac,20);	//--Генерация случайного MAC-адреса (device.board.mac);
//genMacAddr();						//--Генерация случайного MAC-адреса(buff.mac[6]);

//=================================================================================================
//							5.Установка параметров для устройств I/O
//=================================================================================================
  board.depth     		=vDepthSYS();	//--Системная разрядность;	
  device.adc.depth		=vDepthADC(); 	//--ADC разрядность;
  device.adc.driftVar	=vDriftADC(); 	//--ADC допустимый дрейф значения(для фильтрации);
  device.adc.driftNull  =vNullADC();  	//--ADC допустимый дрейф нуля(для фильтрации);
  device.pwm.depth    	=vDepthPWM();   //--PWM разрядность;
//-------------------------Временная заглушка для совместимости с FLProgWiznetClass----------------
  device.spi.busETH     =vEthBus(0);
  device.spi.csETH      =vEthCS(0);
//--------------------------------------------------------------------------------------------------
#if defined(RT_HW_PERMIT_TCH)
  device.tch.depth     	=vDepthTCH();	//--Touch разрядность;
#endif
//--------------------------------------------------------------------------------------------------
#if defined(RT_HW_PERMIT_DAC)
  device.dac.depth      =vDepthDAC(); 	//--DAC разрядность;
#endif
//=================================================================================================
//							6.Настройка разрядности  ADC
//=================================================================================================
#if defined(RT_HW_ADC_PERMIT_SET_RESOLUTION) 
  analogReadResolution(device.adc.depth); 
#endif 
//=================================================================================================
//							7.Настройка разрядности  ADC
//=================================================================================================
#if defined(RT_HW_PWM_PERMIT_SET_RESOLUTION)
  analogWriteResolution(device.pwm.depth); 
#endif  
//=================================================================================================
//							8.M5Stack-Core-ESP32:: 
//  DAC сбрасывается для  того, чтобы при загрузке не было лишних звуков из встроеннного пьезо-излучателя;
//=================================================================================================
#if defined(RT_HW_PERMIT_DAC) && defined(RT_HW_BOARD_M5Stack_Core_ESP32) 
  dacWrite(25,0);
#endif 
 //================================================================================================
//							9.Инициализация параметров устройств связи (UART,i2c,SPI)
//=================================================================================================
#if defined(RT_HW_LINK_UART)
  uartInitParamAll();		//--Установка и настройка параметров по умолчанию для UART;
#endif
//-------------------------------------------------------------------------------------------------
#if defined(RT_HW_LINK_I2C)
  i2cInitParamAll();		//--Установка и настройка параметров по умолчанию для i2c;
#endif
//-------------------------------------------------------------------------------------------------
#if defined(RT_HW_LINK_SPI)
  spiInitParamAll();		//--Установка и настройка параметров по умолчанию для SPI;
#endif
//=================================================================================================
//							10.Установка длины поля для вывода имени пинов
//=================================================================================================
mess.lenPin=3;
#if   defined(RT_HW_CORE_STM32)
mess.lenPin=4;
#endif
#if   defined(RT_HW_CORE_ESP8266)
mess.lenPin=3;
#endif	
//=================================================================================================
};	//--End КОНСТРУКТОРА	

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//							 СОЗДАНИЕ ВНЕШНЕГО ОБЪЕКТА
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RT_HW_BASE RT_HW_Base;									
//-------------------------------------------------------------------------------------------------	