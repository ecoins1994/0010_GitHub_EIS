//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//						             RT_HW_BASE.h
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ifndef   RT_HW_BASE_h
#define   RT_HW_BASE_h
//=================================================================================================
#define   RT_HW_BASE_VER 		 (uint8_t)201				//--Номер версии;
#define   RT_HW_BASE_VER_NAME 	"2.0.1 26.02.2024"			//--Наименование версии;
//
//=================================================================================================
//						1.Подключение базовых системных библиотек
//=================================================================================================
#if defined(ARDUINO) && (ARDUINO >= 100) 
  #include <Arduino.h>		//--Основная библиотека Arduinо для новых плат;
#else
  #include <WProgram.h>		//--Основная библиотека Arduinо для устаревших плат;
#endif
  #include <stdint.h>		//--Cтандартное объявление нескольких целочисленных типов и макросов;	
//=================================================================================================
//								2.Макросы,перечисления, массивы в PROGMEM
//=================================================================================================
  #include "BASE_001_Common/COM_100_DefinedTotalParam.hpp"	//--Макросы основные;
  #include "BASE_001_Common/COM_110_DefinedLinkBoard.hpp"	//--Макросы для UART,i2c,SPI; 
  #include "BASE_001_Common/COM_150_DefinedEnumBoard.hpp" 	//--Перечисления(enum) для доступа к описаниям плат в PROGMEM;
  #include "BASE_001_Common/COM_160_DefinedArrayPGM.hpp" 	//--Массивы в PROGMEM;
  #include "BASE_001_Common/COM_200_DefinedForFLProg.hpp" 	//--Макросы для совместимости с FLProg;
//=================================================================================================
//								3.Выбор плат
//							[AVR,SAM,SAMD21,ESP8266,ESP32,RP2040,STM32,ANON]
//=================================================================================================
  #include "BASE_003_Select/Select_301_AVR.hpp"				//--Select a board AVR;
  #include "BASE_003_Select/Select_302_SAM3X_SAMD.hpp"		//--Select a board SAMX,SAMD;
  #include "BASE_003_Select/Select_303_ESP8266.hpp"			//--Select a board ESP8266;
  #include "BASE_003_Select/Select_304_ESP32.hpp"			//--Select a board ESP32;
  #include "BASE_003_Select/Select_305_RP2040.hpp"			//--Select a board Raspberry Pi Pico;
  #include "BASE_003_Select/Select_310_1_STM32F1.hpp"		//--Select a board STM32F1;
  #include "BASE_003_Select/Select_310_2_STM32F4x1.hpp"		//--Select a board STM32F4x1;
  #include "BASE_003_Select/Select_310_3_STM32F4x7.hpp"		//--Select a board STM32F4x7;
  #include "BASE_003_Select/Select_310_4_STM32H7.hpp"		//--Select a board STM32H7;
//-----------------------В конце обязательный выбор платы ANONдля не обнаруженной платы)-----------
  #include "BASE_003_Select/Select_390_ANON.hpp"			//--Select a board for the Сore ANON;
//=================================================================================================
//								4.Описание CORE для используемых MCU 
//							[AVR,SAM,SAMD21,ESP8266,ESP32,RP2040,STM32,ANON]
//						Выбирается одно из описаний выбранной в разделе 3 платы.
//=================================================================================================	
  #include "BASE_004_Core/CORE_401_AVR.hpp"					//--CORE AVR;
  #include "BASE_004_Core/CORE_402_SAM3X.hpp"				//--CORE SAM;
  #include "BASE_004_Core/CORE_403_ESP8266.hpp"				//--CORE ESP8266;
  #include "BASE_004_Core/CORE_404_ESP32.hpp"				//--CORE ESP32;
  #include "BASE_004_Core/CORE_405_RP2040.hpp"				//--CORE Raspberry Pi Pico;
  #include "BASE_004_Core/CORE_410_STM32.hpp"				//--CORE STM32;
//-----------------------В конце обязательное описание CORE(для не обнаруженной платы)-------------
  #include "BASE_004_Core/CORE_490_ANON.hpp"				//--CORE ANON - не обнаруженная плата;
//=================================================================================================
//								5.Дополнительные определения для подержки разных CORE 
//								 (STM32 Config SERIAL_XXX ...)
//=================================================================================================	
  #include "BASE_004_Core/CORE_491_ADD_DEFINE.hpp"			//--CORE Add define;
//=================================================================================================
//								6.Описание поддерживаемых плат
//							[AVR,SAM,SAMD21,ESP8266,ESP32,RP2040,STM32,ANON]
//=========================================================	========================================
  #include  "BASE_005_Board/Board_501_AVR.hpp"	    		//--Board AVR;
  #include  "BASE_005_Board/Board_502_SAM3X_SAMD.hpp"		//--Board SAMX,SAMD;
  #include  "BASE_005_Board/Board_503_ESP8266.hpp"			//--Board ESP8266;
  #include  "BASE_005_Board/Board_504_1_ESP32S.hpp"			//--Board ESP32S;
  #include  "BASE_005_Board/Board_504_2_ESP32_M5_PICO.hpp"	//--Board_M5Stack;
  #include  "BASE_005_Board/Board_504_3_ESP32C3.hpp"		//--Board ESP32_C3;
  #include  "BASE_005_Board/Board_504_4_ESP32S2.hpp"		//--Board ESP32S2;
  #include  "BASE_005_Board/Board_504_5_ESP32S3.hpp"		//--Board ESP32S3;
  #include  "BASE_005_Board/Board_505_RP2040.hpp"			//--Board RP2040(Raspberry Pi Pico);
  #include  "BASE_005_Board/Board_510_1_STM32F103X.hpp"		//--Board STM32F103X;
  #include  "BASE_005_Board/Board_510_2_STM32F4x1X.hpp"		//--Board STM32F4x1X;
  #include  "BASE_005_Board/Board_510_3_STM32F4x7X.hpp"		//--Board STM32F4x7X;
  #include  "BASE_005_Board/Board_510_4_STM32H7.hpp"			//--Board STM32H7;
//-----------------------В конце обязательная плата ANON (для не обнаруженной платы)---------------
  #include  "BASE_005_Board/Board_590_ANON.hpp"				//--Board ANON - не обнаруженная плата; 
//=================================================================================================
//						7.УПРАВЛЕНИЕ ВКЛЮЧЕНИЕМ РАЗДЕЛОВ БИБЛИОТЕКИ
//							(может использоваться при отладке)
//=================================================================================================
  #define RT_HW_LINK_UART			//--Разрешение работы UART;
  #define RT_HW_LINK_I2C			//--Разрешение работы I2С;
  #define RT_HW_LINK_SPI			//--Разрешение работы Ш"С;
  #define RT_HW_BLOCK_FOR_DEBUG		//--Блокировка системных функций;  
//------------------------------------------------------------------------------------------------- 
  #if !defined(RT_HW_BLOCK_ETH)
    #define RT_HW_LINK_ETH			//--Разрешение работы Ethernet;
  #endif

//=================================================================================================
//						8.Подключение системных библиотек
//=================================================================================================
  #include <Wire.h>					//--Подключение библиотеки i2c (всегда доп.память 1192/113);
//-------------------------------------------------------------------------------------------------
  #include <SPI.h>					//--Подключение библиотеки SPI;	  
//-------------------------------------------------------------------------------------------------
#if defined(RT_HW_CORE_AVR)
  #include <avr/pgmspace.h>			//--Библиотека для работы с PROGMEM;
  #include <util/crc16.h>      		//--Используется для подсчета CRC16 1-Wire;
#endif
//-------------------------------------------------------------------------------------------------
#if defined(RT_HW_LINK_UART) && defined(RT_HW_PERMIT_UARTS)
  #include <SoftwareSerial.h>	  	//--Библиотека программного UART (SoftwareSerial);
#endif
//-------------------------------------------------------------------------------------------------
#if defined(RT_HW_LINK_ETH)
  #include "IPAddress.h"			//--Библиотека поддержки IP адресов;
#endif
//=================================================================================================
//								6.Структуры данных для пинов и коммунитационных каналов 
//                                  (используют параметры из CORE и Board)
//=================================================================================================
  #include "BASE_002_Struct/Struct_201_System.hpp"			//--Структуры системных данных;
  #include "BASE_002_Struct/Struct_205_Generator.hpp"			//--Генераторы, счетчики, дешифраторы;
  #include "BASE_002_Struct/Struct_210_Pins.hpp"				//--Пины;
  #include "BASE_002_Struct/Struct_220_Link.hpp"				//--Внешние структуры;
//-------------------------------------------------------------------------------------------------
  #include "RT_HW_ONEWIRE.h"									//--Библиотека для  работы с 1-Wire;

//=================================================================================================
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//									8.КЛАСС   RT_HW_BASE.h
//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class RT_HW_BASE{
public:
//=================================================================================================
//								8.3. Дополнительные подключаемые библиотеки
//=================================================================================================
#if defined(RT_HM_COREM)			//==Резервирование для многоядерных контроллеров;
//------Индексы------------------------------------------------------------------------------------
  uint8_t  i,j,m;
//------Рабочие переменные-------------------------------------------------------------------------
  uint8_t  bf8,ba8,bd8;
  char     chr;
  uint32_t bf32;
//------Рабочий массив-----------------------------------------------------------------------------
  uint8_t  arr[16];
//------Рабочие параметры для вычисления в функциях UNIX ------------------------------------------
  uint16_t unx_w0,unx_w1,unx_w2;
  uint8_t  unx_b0,unx_b1,unx_b2;
  uint32_t unx_d0,unx_d1,unx_d2;
  uint8_t  unx_idx;
  uint16_t unx_year4;
#endif
//-------------------------------------------------------------------------------------------------
  RT_HW_STRUCT_BOARD	board;							//--Основные параметры платы;
  RT_HW_STRUCT_DEVICE 	device;							//--Параметры для используемых стандартных устройств (пины, cs и т.п.)
  RT_HW_STRUCT_MESS		mess;						    //--Параметры для генерации сообщений (используются в т.ч. и консолью);
  RT_HW_STRUCT_SHED		shed;							//--Параметры диспетчера;  
  RT_HW_STRUCT_CONSOLE	console;						//--Данные для работы с консолью;
  RT_HW_STRUCT_UNIX_ID  unixID;							//--Время в формате UNIX;
  uint8_t               isInit=0;						//--Флаг инициализациии параметров(полезно для многоядерных MCU);
//=================================================================================================
//									8.4. API функций
//=================================================================================================
//-------------------------------------------------------------------------------------------------
//								8.4.1 API системных функций
//-------------------------------------------------------------------------------------------------
  #include "BASE_100_API System/API_100_FuncGetArrayPGM.hpp"	//--API чтения PGM таблиц описания плат;
  #include "BASE_100_API System/API_101_FuncGetDefineNumber.hpp"//--API чтения числовых  параметров определенных через макрос define;
  #include "BASE_100_API System/API_102_FuncGetDefineName.hpp"	//--API чтения строковых параметров определенных через макрос define (использует mee.str);  
  #include "BASE_100_API System/API_103_FuncGetNamePin.hpp"		//--API для получения номеров и имен пинов(в т.ч. STM32,ESP8266);  
  #include "BASE_100_API System/API_104_FuncGetBoardParam.hpp"  //--API для получения параметров из описания плат; 
  #include "BASE_100_API System/API_105_FuncNormParam.hpp"		//--API нормализации параметров к системной разрядности(board.depth);
  #include "BASE_100_API System/API_106_FuncFindFreeDevice.hpp"	//--API первого свободного устройства;
  #include "BASE_100_API System/API_107_FuncBaseAdd.hpp"		//--API базовые для использовании функциями библиотеки;
  #include "BASE_100_API System/API_108_FuncMess.hpp"			//--API формирования сообщений;
  #include "BASE_100_API System/API_109_FuncCRC.hpp"			//--API CRC;
  #include "BASE_100_API System/API_120_FuncPins.hpp"			//--API работы с пинами;
//-------------------------------------------------------------------------------------------------
//								8.4.2 API управления задачами
//-------------------------------------------------------------------------------------------------
  #include "BASE_110_API DirectTask/API_100_FuncTime.hpp"		//--API работы со временем(mcs,ms);
  #include "BASE_110_API DirectTask/API_101_FuncGenerator.hpp"	//--API генераторов;
  #include "BASE_110_API DirectTask/API_102_FuncCounter.hpp"	//--API дешифраторов,кодеров,счетчиков;
  #include "BASE_110_API DirectTask/API_103_FuncCheckVar.hpp"	//--API контроля изменения переменных;
  #include "BASE_110_API DirectTask/API_110_FuncSheduler.hpp"	//--API диспетчера, управление вызовом задач;
  #include "BASE_110_API DirectTask/API_150_FuncForFLProg.hpp"	//--API для совместимости с FLProg;
//-------------------------------------------------------------------------------------------------
//								8.4.3 API интерфейсов платы (MCU)
//-------------------------------------------------------------------------------------------------
  #include "BASE_120_API LinkBoard/API_100_Uart.hpp"			//--API для работы с UART;
  #include "BASE_120_API LinkBoard/API_102_I2C.hpp"				//--API для работы с i2c;
  #include "BASE_120_API LinkBoard/API_104_SPI.hpp"				//--API для работы с SPI;
  #include "BASE_120_API LinkBoard/API_106_SPN.hpp"				//--API для работы с SPN;
//-------------------------------------------------------------------------------------------------
//								8.4.4 API интерфейсов расширения платы
//-------------------------------------------------------------------------------------------------
  #include "BASE_130_API LinkBoardExp/API_100_FuncEthernet.hpp"	//--API функций для Ethernet,Wi-Fi;
//-------------------------------------------------------------------------------------------------
//								8.4.5 API часов реального времени
//-------------------------------------------------------------------------------------------------
  #include "BASE_140_API ClockRealTime/API_100_FuncUnixTime.hpp"	//--API функций для времени в UNIX-формате;"		
//-------------------------------------------------------------------------------------------------
//								8.4.6 API консоли (вывод в монитор порта)
//-------------------------------------------------------------------------------------------------

  #include "BASE_200_API Console/API_100_ConsoleBase.hpp"		//--API базовых функций для работ  с консолью; 
  #include "BASE_200_API Console/API_101_ConsoleFuncOutput.hpp"	//--API базовых функций для работ  с консолью; 
  #include "BASE_200_API Console/API_102_ConsoleFuncArrPGM.hpp" //--API вывода массивов описания платы из PROGMEM; 
  #include "BASE_200_API Console/API_103_ConsoleFuncParam.hpp"	//--API базовых функций для работ  с консолью; 
  #include "BASE_200_API Console/API_150_ConsoleHead.hpp"		//--API функций вывода заголовков на консоль;
  #include "BASE_200_API Console/API_160_ConsoleHeadLink.hpp"	//--API функ. вывода  на консоль;  
  #include "BASE_200_API Console/API_170_ConsoleScanDevice.hpp" //--API функций сканирование устройств(i2c);
//-------------------------------------------------------------------------------------------------
RT_HW_BASE();												//--Конструктор;
private:
};  //---END CLASS RT_HW_BASE.h====================================================================
extern RT_HW_BASE 				RT_HW_Base; 				//--External reference to the RT_HW_Base object;
//=================================================================================================
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//										9.Глобальные функции
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//										10.КЛАССЫ ДЛЯ РАБОТЫ С ФИЛЬТРАМИ
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "BASE_300_API Filters/API_301_FilterMedian3.hpp"	//--API медианный фильтр 3-го порядка (самый быстрый);
#include "BASE_300_API Filters/API_302_FilterMedian.hpp"	//--API медианный фильтр n-го порядка;
#include "BASE_300_API Filters/API_303_FilterRingAverage.hpp"//-API фильтр бегущего среднего с кольцевым буфером;
#include "BASE_300_API Filters/API_304_FilterCritical.hpp"	//--API фильтр критических значений;
#include "BASE_300_API Filters/API_305_FilterChatter.hpp"	//--API фильтр дребезга    значений;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//										11.КЛАССЫ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ ФУНКЦИЯМИ
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//-------------------------------------------------------------------------------------------------
#endif //---RT_HW_BASE_h===========================================================================
//-------------------------------------------------------------------------------------------------