//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                    				1.Defined for LCD
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define RT_HW_LCD44780_MAX_DEVICE		15			//--Maximum number of allowed devices;
#define RT_HW_LCD44780_MAX_COLS  		40			//--Maximum number of columns;
#define RT_HW_LCD44780_MAX_ROWS  		4			//--Maximum number of rows;
#define RT_HW_LCD44780_PERIOD_TICK  	uint8_t(20)	//--System time period in ms;
#define RT_HW_LCD44780_TIME_CURSOR		uint8_t(37)	//--Cursor setting time(mcs);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                    				1.STRUCTURE for LC
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//=================================================================================================
//                   				1.1.Structure for device
//=================================================================================================
struct   RT_HW_LCD44780_DEVICE_ID{		  
RT_HW_STRUCT_I2C_DEV dvI;
RT_HW_STRUCT_SPI_DEV dvS;
RT_HW_STRUCT_SPN_DEV dvN;
RT_HW_STRUCT_LCD_DEV dvL;
//-------------------------------------------------------------------------------------------------
char     mi='I';				//--0.Mode interface;
uint8_t  custom=0; 				//--1.Setting option;
uint8_t  status=0;				//--2.Status device: =0 no init; =1 Master.MCU->Slave.device; =2 Slave;
uint8_t  link=0;				//--3.Completed transaction flag;
uint8_t  codeErr=0;				//--4.Code error;
//-------------------------------------------------------------------------------------------------
uint8_t  dir;					//--5.Working  dir for direct();
uint8_t  step;					//--6.1.Working step for add function;		
uint8_t  stepInit; 				//--6.2.Working step for initLcd(); 
uint8_t  cnt,cntErr;			//--8.Counters;
uint8_t  err:1,action:1;	    //--9.Working flags; 
//-------------------------------------------------------------------------------------------------
uint8_t  workDelay=0;			//--10.Working register; 
uint8_t  pointDelay;			//--11.Return point from a function;
uint16_t sizeDelay;				//--12.Size delay;	
uint32_t startDelay;			//--13.Working register; 
//-------------------------------------------------------------------------------------------------
 int8_t  idx;					//--Index;;
//-------------------------------------------------------------------------------------------------
uint8_t  cols=16; 				//--20.Number of display columns;
uint8_t  rows=2;				//--21.Number of display rows;
uint8_t  sizeLcd=3;				//--22.Size LCD ();	
uint8_t	 chip=1,agoChip=0;		//--22.Number of display chip;
//-------------------------------------------------------------------------------------------------
uint8_t  num=0; 				//--23.Device number from 1 to RT_HW_LCD44780_MAX_DEVICE). By this number, external units FLProg are link to the device;
uint8_t  genState=2;			//--24.State generator: =0-OFF; =1-ON; =2-Reset external units FLProg->OFF;
uint8_t  busy;					//--25.Display Busy Flag;
//-------------------------------------------------------------------------------------------------
uint8_t  pin[11];				//--26.Pins for BUS4,BUS8:: RS,RW(E2),E1,D0-D7; 
//-------------------------------------------------------------------------------------------------
uint8_t  extReset,agoReset;		//--27.External restart Lcd 			[0->1];
uint8_t  extClear,agoClear;		//--28.External Cleaning Lcd			[0->1]; 
uint8_t  extLight, agoLight;	//--29.External Lcd backlight control	[=1];
uint8_t  extEN=1, agoEN=0;		//--30.External Lcd work permit  				[=1];
//-------------------------------------------------------------------------------------------------		
uint16_t periodReboot=0;		//--31.Internal restart period in min. If =0, restart is not performed;
uint16_t cntReboot;				//--32.Internal restart period counter in min (max 60);
uint16_t runReboot=0;			//--33.Reboot start command;
//--------------------------------------------------------------------------------------------------
//-----------------Основные параметры управления---------------------------------------------------
uint8_t  periodBlink=10;		//--Период мерцания полями (в тиках);
//-----------------Параметры тактирующего генератора (для связи с внешними блоками)----------------
uint32_t timeBeginGen=0;		//--Рабочий регистр для генератора;
uint8_t  periodGen=RT_HW_LCD44780_PERIOD_TICK; //--Период тактирующего генератора в ms;
uint16_t periodWatchDog=1000;	//--Период сторожевого таймера в ms;
uint32_t genTime;				//--Рабочий регистр тактирующего генератора;
uint16_t genCalcMin;			//--Счетчик для вычисление минутных событий;
//---------------------------Флаги-----------------------------------------------------------------
uint8_t  cmnd:1,				//--0/1-в дисплей передаются данные/команда (RS=0/1);  
		 event:1, 				//--События 50мс;
		 runReset:1,			//--Флаг запуска сброса;	
		 tick:1,				//--Меандр 50мс;
		 mnt:1;					//--Меандр 1 мин;
//-----------------------Рабочие регистры----------------------------------------------------------
uint8_t  cntWatchDogBusy;		//--Счетчик watch dog для флага busy (в тиках);
uint32_t timeDelay;				//--Рабочие регистры для работы со временем;
uint16_t buff16;				//--Рабочий регистры для функции;
uint8_t  index;					//--Рабочий регистр;
uint8_t  codeBlack=0xFF;		//--Код для отображения черного квадрата (может меняться в зависимости от кодировки);
//----------------Дополнительные переменные управления измерением-----------------------------------
uint8_t  initDevice=0;			//--Состояние настройки устройства;
uint8_t  readyDevice=0;			//--Состoяние готовности устройства к выводу данных;
uint8_t  qntTickSec=100;		//--Кол-во тиков в сек;
uint8_t  qntWatchDog=10;        //--Кол-во тиков в сторожевом таймере;
uint8_t  cntTickSec=0;			//--Счетчик для отсчета сек по тикам;
uint8_t  cntSecMin=0;			//--Счетчик для отсчета минут по секундам;
uint8_t  eventTick,    eventSec,    eventMin;    //--События тиковое,секундное,минутное;
uint8_t  meanderTick:1,meanderSec:1,meanderMin:1;//--Меандры тиковый,секундный,минутный;
//uint8_t  cntFind;
//------------------------------------------------------------------------------------------------------
char     codeSend;
uint16_t timeSend;
uint8_t  varSend, bffSend, cmdSend, chipSend, idxSend, pinSend;
uint8_t  arrSend[4], buffSend, bitE;
uint8_t  pinEN;
//uint8_t  cmd;
//------------------------------------------------------------------------------------------------------ 
uint8_t  arrData[RT_HW_LCD44780_MAX_COLS+1];	//--Массив с данными;
uint8_t  arrDataCur;			//--Текущее прочитанное значение;
uint8_t  arrPackMax=8;			//--Ограничение отправляемых значений за одну транзакцию; 
uint8_t  arrLen;				//--Размер записываемого массива;
uint8_t  arrSize;				//--Кол-во записанных в массив данных; 
uint8_t  arrPackCnt=0;			//--Счетчик размера пакета за одну транзакцию;
uint8_t  arrState;				//--Состояние при чтении: =0 -все прочитано; =1-есть данные; 
								//  =2-есть данные и передан пакет=arrReadPackMax; =3-чтение за пределами записываемого массива;  
uint8_t  arrIdx;				//--Индекс текущего значения массива;
uint8_t  arrDir;				//--Номер этапа для функций работы с массивом;
uint8_t  arrSendOk;				//--Результат успешной отправки всего массива;			
//-------------------------------------------------------------------------------------------------------
};

//=================================================================================================
//                   				1.1.Structure for output LCD
//=================================================================================================
// modeVar: тип данных: B(uint8_t),W(int16_t),L(int32_t),F(float),S(String),C(char),R(бит),T(текст из PROGMEM),G(мерцание),
// formatVar: формат данных: U-целое без знака[B,W,L]; I-целое со знаком[B,W,L], 0,1,2,3-кол-во знаков после точки[0,1,2,3], H-HEX[B,W,L],
//                           #-битовое представленияю,впереди старший бит[B,W,L],#-битовое представленияю,впереди иладший бит[B,W,L],
//                           N-отсутствует;
//							 C-в формате char[B],T-формат времени XX[B]; 
// modeTask:  тип вызова задачи -C(по изменению,P(периодически),T(периодически при изменениях),A(по изменениям или периодически),
//                               S(по входу EN 0->1),F(однократно),N(вызов отключен);
// alig: выравнивание в поле:L(влево),C(по центру),R(вправо),N(без выравнивания);
// suff: суффикс(char), выводимый после данных.Если '~' - суффикс не выводится;
// periodLimit: ограничение(ms/tick) по времени вызова задачи[для C,P,T,A];
// periodTask:  период(ms/tick) вызова задач
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
struct RT_HW_LCD44780_PARAM_ID{			
uint8_t  custom=0;				//--1.Setting option;
uint8_t  num=0;  				//--2.Device number from 1 to RT_HW_LCD44780_MAX_DEVICE). By this number, external units FLProg are link to the device;
uint8_t  dir=0;					//--5.Working  dir for direct();
uint8_t  step;					//--6.Working step for add function;
uint8_t  ddr=0;					//--Номер этапа программы управления;
uint8_t  link;
uint8_t  codeErr=0;
char     code;
uint8_t  bf8;
uint8_t  pinEN;
uint8_t  cmd;
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
char     modeVar='N';			//--Mode   data [B,W,L,F,S,C,R,T,G];
char     formatVar='N';			//--Format data [U,I,0,1,2,3,#,*,H,C,T];
char     modeTask='A';			//--Mode task   [C,P,T,A,E];
char     alig='L';				//--Field alignment:L(Left),C(Center),R(Right),N(no Alig);					
char     suff='~';				//--Suffix(='~' no suffix);
uint8_t  run=0,cmdRun;			//--Команда:=0-ожидание;=1-вывод данных;=2-вывод по изменению;=3 очистка поля для мерцания; 
uint8_t	 extEN=1, agoEN=0;	//--Состояние входа EN(текущее и предыдущее значения);
uint8_t  cntEN=0;			//--Счетчик задержки вывода после перехода EN 0->1;
uint8_t  extGen=0,agoGen=0;	//--Текущее и предыдущее состояние главного тактирующего генератора;
//----Параметры времени в тиках--------------------------------------------------------
uint8_t  periodGen=50;				//--Период тика;
uint8_t  periodLimit=2, cntLimit=0;	//--Период и счетчик минимального периода вывода(в тиках);
uint16_t periodTask=1,  cntTask=0;	//--Период и счетчик периодического вывода(в тиках) [режимы P,T,A];  
uint8_t  periodBlink=10,cntBlink=0;	//--Период и счетчик мерцания поля (в тиках);
//--------------------------------------------------------------------------------------
int32_t  agoVar=0;				//--Буфер предыдущего значения числовых переменных;
//--------------------------------------------------------------------------------------
uint8_t  col,row,len;   		//--Номера колонки,строки,размер поля;
uint16_t msLen:6, msLenVar:6,	//--Общая длина поля,длина переменной;
         msLenSuff:1,			//--Длина суффикcа;
         curChip:2,agoBit:1; 	//--Номер текущего чипа Lcd;
uint16_t msLenBegin:6,msLenEnd:6,//-Длина Begin и End заголовков;
         first:1,flicker:1,		//--Флаг первого запуска, флаг мерцания;
	     modeBlink:1,blink:1;	//--
uint8_t  msLenHead=255;			//--Рабочая длина заголовка(может меняться от размера переменной);
uint8_t  idx,xSrc;				//--Рабочий индекс для организации циклов;
uint8_t  vCursor;				//--Код позиции курсора;
uint8_t  buff;					//--Буфер для выводимого кода;
//--------------------------------------------------------------------------------------
uint8_t  agoState=0;
};
//=================================================================================================
//                   				1.1.Structure for device LCD
//=================================================================================================
struct RT_HW_LCD44780_FONT{uint8_t font[8];uint16_t code;}; //--The structure for a symbol bitmap;
//=================================================================================================
//                   				1.1.Structure for device LCD
//=================================================================================================
struct RT_HW_LCD44780_HIVE{uint16_t set=0; uint8_t qnt=0;};	//--The structure of the device busy flags;
//=================================================================================================
//                   				1.1.Structure for device LCD
//=================================================================================================
const char RT_HW_LCD44780_headEmpty[] PROGMEM="~";			//--Empty header;
//=================================================================================================



//=================================================================================================
#define RT_HW_LCD44780_PERIOD_BLINK_ON 	15			//--Длительность включения  при мерцании в тиках(50ms) ;
#define RT_HW_LCD44780_PERIOD_BLINK_OFF	10			//--Длительность выключения при мерцании в тиках(50ms) ;
#define RT_HW_LCD44780_CNT_TICK_SEC  	20			//--Количество тиков в одной секунде;
#define RT_HW_LCD44780_QNT_BLOCK		3			//--Количество тиков для возобновления вывода после EN=0;
#define RT_HW_LCD44780_WATCH_DOG_BUSY    20			//--Размер watchDog в тиках;
#define RT_HW_LCD44780_BLANK		    ' '			//--Символ заполнения;
#define RT_HW_LCD44780_BREAK_CHAR		'~'			//--Символ "Запрещающего" символа;
#define RT_HW_LCD44780_CODE_BLANK		's'			//--Символ указатель, что заполнитель "пробел";
#define RT_HW_LCD44780_UPPER  			1			//--0 -нижний регистр, 1 -верхний регистр (при выводе HEX-значений);
//-------------------------------------------------------------------------------------------------
//#define RT_HW_LCD44780_FIND_MAX_OK		8			//
//#define RT_HW_LCD44780_FIND_PERIOD		20			//
//#define RT_HW_LCD44780_FIND_PERIOD_MAX	2000		//
//-------------------------------------------------------------------------------------------------
#define RT_HW_LCD44780_BIT_RS		0				//--Number bit RS;
#define RT_HW_LCD44780_BIT_RW		1				//--Number bit RW(E2),
#define RT_HW_LCD44780_BIT_E		2				//--Number bit E(E1);
#define RT_HW_LCD44780_BIT_ON		3				//--Number bit Led;
#define RT_HW_LCD44780_BIT_D4		4				//--Number bit D4;
#define RT_HW_LCD44780_BIT_D5		5				//--Number bit D5;
#define RT_HW_LCD44780_BIT_D6		6				//--Number bit D6;
#define RT_HW_LCD44780_BIT_D7		7				//--Number bit D7;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
const char  RT_HW_LCD44780_HEAD[] PROGMEM="~";

static const unsigned char  RT_HW_LCD44780_ROW_SET_8[]  PROGMEM={0x00,0x40,0x08,0x48};
static const unsigned char  RT_HW_LCD44780_ROW_SET_16[] PROGMEM={0x00,0x40,0x10,0x50};
static const unsigned char  RT_HW_LCD44780_ROW_SET_20[] PROGMEM={0x00,0x40,0x14,0x54};
static const unsigned char  RT_HW_LCD44780_ROW_SET_40[] PROGMEM={0x00,0x40,0x00,0x40};
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                 		1.LCD Bit Sequence Table
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++																
static const unsigned char  RT_HW_LCD44780_TABLE_ORDER_BIT_LCD[] PROGMEM={ 
//RS RW E LED D4 D5 D6 D7
  0, 1, 2, 3, 4, 5, 6, 7,	//--RS, RW,  E,LED, D4, D5, D6, D7;
  6, 5, 4, 7, 0, 1, 2, 3	//--D4, D5, D6, D7,  E, RW, RS,LED;
};  
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                		 2.Control code table for 4-bit data bus
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
static const unsigned char  RT_HW_LCD44780_INIT_BUS4[] PROGMEM= 
{0,'N',250,				//--pause 25ms 250х100=25мс; 
 0,'N',250,				//--pause 25ms 250х100=25мс; 
 0b00000011,'T',45,		//--code 0x3,'T',pause 25ms 45мкс; 
 0b00000011,'T',45,
 0b00000011,'T',45,
 0b00000010,'T',20,
 0b00100000,'I',20,
 0b00000001,'I',20,
 0b00000100,'I',20,
 0b00101000,'I',20,
 0b00010000,'I',20,
 0b00001100,'I',20,
 0b00000110,'I',20,
 0b00000001,'I',20};
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                 		3.Control code table for 8-bit data bus
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
static const unsigned char  RT_HW_LCD44780_INIT_BUS8[] PROGMEM= 
{0,'N',250,				//--pause 25ms; 
 0,'N',250,				//--pause 25ms; 
 0b00110000,'I',45,		//--init;
 0b00110000,'I', 1,
 0b00110000,'I', 1,
 0b00111000,'I', 1,		//--bus 8-bits, two line;
 0b00001110,'I', 1,		//--DCB:   D=1 display ON,С=1 cursor underline ON,B=1 blinking square cursor ON;
 0b00000001,'I',20,		//--clear display;
 0b00000110,'I', 1,		//--I/D S: I/D=1 address increment ON; S=0 screen shift OFF.
 0b00001100,'I', 1		//--DCB:   D=1 display ON,С=1 cursor underline ON,B=1 blinking square cursor ON;
};
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                     4.CYRILLIC CODE TABLE LCD
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
static const unsigned char  RT_HW_LCD44780_CONVERT_RUS[] PROGMEM= 
{0x41,0xA0,0x42,0xA1,0xE0,0x45,0xA3,0xA4,   // АБВГДЕЖЗ
 0xA5,0xA6,0x4B,0xA7,0x4D,0x48,0x4F,0xA8,   // ИЙКЛМНОП
 0x50,0x43,0x54,0xA9,0xAA,0x58,0xE1,0xAB,   // РСТУФХЦЧ
 0xAC,0xE2,0xAD,0xAE,0xAD,0xAF,0xB0,0xB1,   // ШЩЪЫЬЭЮЯ
 0x61,0xB2,0xB3,0xB4,0xE3,0x65,0xB6,0xB7,   // абвгдежз
 0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0x6F,0xBE,   // ийклмноп
 0x70,0x63,0xBF,0x79,0xE4,0x78,0xE5,0xC0,   // рстуфхцч
 0xC1,0xE6,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,	// шщъыьэюя
 0xA2,0xB5,0xFF,0xFF};					    // Ёё
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//=================================================================================================
//								5.FONTS RUS
//=================================================================================================
#if defined(RT_HW_LCD44780_EXT_GEN_RUS)
static const RT_HW_LCD44780_FONT_UNICODE  RT_HW_LCD44780_FONT[] PROGMEM = {	
{{0b11111, 0b10000, 0b10000, 0b11110, 0b10001, 0b10001, 0b11110, 0b00000}, 0xD091},	//Б
{{0b11111, 0b10000, 0b10000, 0b10000, 0b10000, 0b10000, 0b10000, 0b00000}, 0xD093},	//Г
{{0b00110, 0b01010, 0b01010, 0b01010, 0b01010, 0b01010, 0b11111, 0b10001}, 0xD094},	//Д
{{0b10101, 0b10101, 0b10101, 0b01110, 0b10101, 0b10101, 0b10101, 0b00000}, 0xD096},	//Ж
{{0b01110, 0b10001, 0b00001, 0b00110, 0b00001, 0b10001, 0b01110, 0b00000}, 0xD097},	//З
{{0b10001, 0b10001, 0b10001, 0b10011, 0b10101, 0b11001, 0b10001, 0b00000}, 0xD098},	//И
{{0b10101, 0b10001, 0b10001, 0b10011, 0b10101, 0b11001, 0b10001, 0b00000}, 0xD099},	//Й
{{0b00111, 0b01001, 0b01001, 0b01001, 0b01001, 0b01001, 0b10001, 0b00000}, 0xD09B},	//Л
{{0b11111, 0b10001, 0b10001, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000}, 0xD09F},	//П
{{0b10001, 0b10001, 0b10001, 0b01111, 0b00001, 0b10001, 0b01110, 0b00000}, 1059},	//У
{{0b00100, 0b01110, 0b10101, 0b10101, 0b10101, 0b01110, 0b00100, 0b00000}, 1060},	//Ф
{{0b10010, 0b10010, 0b10010, 0b10010, 0b10010, 0b10010, 0b11111, 0b00001}, 1062},	//Ц
{{0b10001, 0b10001, 0b10001, 0b01111, 0b00001, 0b00001, 0b00001, 0b00000}, 1063},	//Ч
{{0b10001, 0b10001, 0b10001, 0b10101, 0b10101, 0b10101, 0b11111, 0b00000}, 1064},	//Ш
{{0b10001, 0b10001, 0b10001, 0b10101, 0b10101, 0b10101, 0b11111, 0b00001}, 1065},	//Щ
{{0b11000, 0b01000, 0b01000, 0b01110, 0b01001, 0b01001, 0b01110, 0b00000}, 1066},	//Ъ
{{0b10001, 0b10001, 0b10001, 0b11101, 0b10011, 0b10011, 0b11101, 0b00000}, 1067},	//Ы
{{0b10000, 0b10000, 0b10000, 0b11110, 0b10001, 0b10001, 0b11110, 0b00000}, 1068},	//Ь
{{0b01110, 0b10001, 0b00001, 0b00111, 0b00001, 0b10001, 0b01110, 0b00000}, 1069},	//Э
{{0b10010, 0b10101, 0b10101, 0b11101, 0b10101, 0b10101, 0b10010, 0b00000}, 1070},	//Ю
{{0b01111, 0b10001, 0b10001, 0b01111, 0b00101, 0b01001, 0b10001, 0b00000}, 1071},	//Я
{{0b00011, 0b01100, 0b10000, 0b11110, 0b10001, 0b10001, 0b01110, 0b00000}, 1073},	//б
{{0b00000, 0b00000, 0b11110, 0b10001, 0b11110, 0b10001, 0b11110, 0b00000}, 1074},	//в
{{0b00000, 0b00000, 0b11110, 0b10000, 0b10000, 0b10000, 0b10000, 0b00000}, 1075},	//г
{{0b00000, 0b00000, 0b00110, 0b01010, 0b01010, 0b01010, 0b11111, 0b10001}, 1076},	//д
{{0b01010, 0b00000, 0b01110, 0b10001, 0b11111, 0b10000, 0b01111, 0b00000}, 1105},	//ё
{{0b00000, 0b00000, 0b10101, 0b10101, 0b01110, 0b10101, 0b10101, 0b00000}, 1078},	//ж
{{0b00000, 0b00000, 0b01110, 0b10001, 0b00110, 0b10001, 0b01110, 0b00000}, 1079},	//з
{{0b00000, 0b00000, 0b10001, 0b10011, 0b10101, 0b11001, 0b10001, 0b00000}, 1080},	//и
{{0b01010, 0b00100, 0b10001, 0b10011, 0b10101, 0b11001, 0b10001, 0b00000}, 1081},	//й
{{0b00000, 0b00000, 0b10010, 0b10100, 0b11000, 0b10100, 0b10010, 0b00000}, 1082},	//к
{{0b00000, 0b00000, 0b00111, 0b01001, 0b01001, 0b01001, 0b10001, 0b00000}, 1083},	//л
{{0b00000, 0b00000, 0b10001, 0b11011, 0b10101, 0b10001, 0b10001, 0b00000}, 1084},	//м
{{0b00000, 0b00000, 0b10001, 0b10001, 0b11111, 0b10001, 0b10001, 0b00000}, 1085},	//н
{{0b00000, 0b00000, 0b11111, 0b10001, 0b10001, 0b10001, 0b10001, 0b00000}, 1087},	//п
{{0b00000, 0b00000, 0b11111, 0b00100, 0b00100, 0b00100, 0b00100, 0b00000}, 1090},	//т
{{0b00000, 0b00000, 0b00100, 0b01110, 0b10101, 0b01110, 0b00100, 0b00000}, 1092},	//ф
{{0b00000, 0b00000, 0b10010, 0b10010, 0b10010, 0b10010, 0b11111, 0b00001}, 1094},	//ц
{{0b00000, 0b00000, 0b10001, 0b10001, 0b01111, 0b00001, 0b00001, 0b00000}, 1095},	//ч
{{0b00000, 0b00000, 0b10101, 0b10101, 0b10101, 0b10101, 0b11111, 0b00000}, 1096},	//ш
{{0b00000, 0b00000, 0b10101, 0b10101, 0b10101, 0b10101, 0b11111, 0b00001}, 1097},	//щ
{{0b00000, 0b00000, 0b11000, 0b01000, 0b01110, 0b01001, 0b01110, 0b00000}, 1098},	//ъ
{{0b00000, 0b00000, 0b10001, 0b10001, 0b11101, 0b10011, 0b11101, 0b00000}, 1099},	//ы
{{0b00000, 0b00000, 0b10000, 0b10000, 0b11110, 0b10001, 0b11110, 0b00000}, 1100},	//ь
{{0b00000, 0b00000, 0b01110, 0b10001, 0b00111, 0b10001, 0b01110, 0b00000}, 1101},	//э
{{0b00000, 0b00000, 0b10010, 0b10101, 0b11101, 0b10101, 0b10010, 0b00000}, 1102},	//ю
{{0b00000, 0b00000, 0b01111, 0b10001, 0b01111, 0b00101, 0b01001, 0b00000}, 1103},	//я
{{0b00001, 0b11111, 0b10000, 0b10000, 0b10000, 0b10000, 0b10000, 0b00000}, 0x490},	//укр. Г
{{0b00000, 0b00010, 0b11110, 0b10000, 0b10000, 0b10000, 0b10000, 0b00000}, 0x491},	//укр. г
{{0b01111, 0b10000, 0b10000, 0b11110, 0b10000, 0b10000, 0b01111, 0b00000}, 0x404},	//укр. Е
{{0b00000, 0b00000, 0b01110, 0b10000, 0b11100, 0b10000, 0b01110, 0b00000}, 0x454},	//укр. е
{{0b01010, 0b00000, 0b01110, 0b00100, 0b00100, 0b00100, 0b01110, 0b00000}, 0x407},	//укр. I
{{0b00000, 0b01010, 0b00000, 0b01100, 0b00100, 0b00100, 0b01110, 0b00000}, 0x457}	//укр. i
};
#endif
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
