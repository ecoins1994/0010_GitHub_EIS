


/*
//=================================================================================================
//		         Структура данных управляющего блока
// Блок:
// 1.Синхронизирует работу внешних блоков меандром RT_HW_Next.blink:
//     -RT_HW_Next.blink=RT_HW_Base.shed.blink50, если включен диспетчер задач RT_HW_Base.sheduler(),
//                                   (флаг включения диспетчера RT_HW_Base.shed.ready=1); 
//     -RT_HW_Next.blink=внутренний генератор меандра 50мс,если RT_HW_Base.shed.ready=0;
// 2.Принимает посылки из NEXTION по программному протоколу 
//			все данные хранятся в массиве RT_HW_NEXT_DEVICE_ID *ptr[RT_HW_NEXT_MAX_DEVICE+1],
//			создаваемом при создании класса RT_HW_NEXT.
//=================================================================================================
struct  RT_HW_STRUCT_MODBUS_DEVICE{           //--Структура для приема транзакций по протоколу ModBus+; 		   
//-----------------Основные параметры управления---------------------------------------------------
uint8_t  custom=0;				//--Код настройки: =0 не настраивался; =1 успешно настроен; >1 код ошибки настройки;
uint8_t  num=0; 				//--Номер устройства (от 1 до MAX_DEVICE).По этому номеру внешние блоки привязываются к устройству;
//-------------------------------------------------------------------------------------------------
uint8_t  ddr=0;					//--Этапы основной       программы управления устройствами;
uint8_t  step;					//--Этапы дополнительной программы управления устройствами;
//-------------------------------------------------------------------------------------------------
uint8_t  busy=0;				//--Флаг занятости UART(доступ RT_HW_Next.ptr[num]->busy);
uint8_t  blink=0, agoBlink=0;   //--Меандр 50мс        (доступ RT_HW_Next.ptr[num]->blink);
uint8_t  wdBusy=0;				//--Счетчик сторожевого таймера от зависания флага занятости UART(busy);
//-----------------Параметры корректируемые до вызова функции setID()------------------------------
uint8_t  uart=255;				//--Номер UART;
uint32_t speed=115200;			//--Скорость UART;
uint8_t  ready=0;				//--Флаг успешной настройки UART;
//-----------------Параметры для работы с массивами данных-----------------------------------------
uint16_t  lenArrBit=RT_HW_MODBUS_QNT_COLINS/8;			//--Длина массива uint8_t  arrByte[];
uint16_t  lenArrByte=2;			//--Длина массива uint8_t  arrByte[];
uint16_t  lenArrWord=1;			//--Длина массива uint16_t arrWord[];
uint16_t  lenArrLong=1;			//--Длина массива uint32_t arrLong[];
uint16_t  lenArrFloat=1;	    //--Длина массива float    arrFloat[];
uint8_t	 *ptrArrBit;			//--Указатель на массив uint8_t  arrBit[];
uint8_t	 *ptrArrByte;			//--Указатель на массив uint8_t  arrByte[];
uint16_t *ptrArrWord;			//--Указатель на массив uint16_t arrWord[];
uint32_t *ptrArrLong;			//--Указатель на массив uint32_t arrLong[];
float    *ptrArrFloat;			//--Указатель на массив uint32_t arrFloat[];
//-----------------Параметры системные-------------------------------------------------------------
//uint8_t  arrSys[4];             //--Системные параметры ([0]=page;);
//uint8_t  ok=0;
//uint8_t  vSleep=0;				//--Режим спит/не спит;
//uint8_t  vPage=99;				//--Номер текущей страницы;
//uint8_t  vYear,vMonth,vDay,vHour,vMin,vSec,vWeek;	//--Параметры времени
//-----------------Основные параметры управления---------------------------------------------------
uint8_t  codeErr;				//--Код ошибки;
//-----------------------------------------------------------------------------
uint8_t  readyRead:1;	//--Флаги; 
//----------------------------------------
uint32_t timeBeginGen;          //--Рабочий регистр для тактирующего генератора;
uint32_t timeBeginBusy;         //--Рабочий регистр для задержки флага busy;
uint32_t timeGet;				//--Рабочий регистр;
uint8_t	 timeOutGetByte=10;		//--Тайм-аут на прием очередного байта транзакции;
//---------------------------------------------------------------------------
uint8_t  index;					//--Счетчик кол-ва принятых байт;
uint8_t  head,func,adr,qnt,crc;
uint32_t crcCalc;
uint16_t cntGetPackAll; 		//--Счетчик принятых всего    транзакций;
uint16_t cntGetPackOk;			//--Счетчик принятых успешных транзакций; 
uint16_t qntByte;
//-----------------------------------------
//uint8_t  dp=0;					//--Номер текущей страницы;
uint8_t  buff[RT_HW_MODBUS_BUFF_REG_SIZE];	//--Буфер для приема данных      из принятой транзакции;
//-----------------------------------------
uint8_t  freshHead;             //--Флаг принятого байта до кода заголовка (0x3A);
uint8_t  codeGetHead;			//--Код  принятого байта до кода заголовка (0x3A);
uint8_t  fresh=0;				//--Флаг обновления параметров структуры;
};
*/

//==================================================================================================
//                   Структура для отправки данных
//==================================================================================================
struct  RT_HW_STRUCT_MODBUS_WRITE_VAR{		//==Структура для записи целого значения с именем inx;
//-----------------Основные параметры управления---------------------------------------------------
uint8_t  num=0; 			//--Номер устройства(от 1 до MAX_DEVICE). По этому номеру внешние блоки(FLProg) привязываются к устройству;
uint8_t  custom=0;			//--Код настройки; 
uint8_t  ddr=0;				//--Этапы основной программы управления устройствами;
char     modeTask='A';  	//--Режим вызова задачи [C,P,T,A,E,Q,F];
//char     modeSend='-';      //--Режим вызова задачи [V,U,T,N,F,S,-];
uint8_t  fresh=0;			//--Флаг обновления ;
uint8_t  agoEN,extEN=1;		//--Предыдущее значение внешней переменной EN-разрешение вывода; 
uint8_t  agoBlink,blink;	//--Для внутреннего генератора меандра;
uint8_t  numReg=0;			//--Номер регистра;
uint8_t  cntLimit,periodLimit; //--Счетчик и период для вывода по изменениям с ограничением периода; 
uint8_t  cntTask, periodTask;  //--Счетчик и период для периодического вывода; 
//uint8_t  checkPage=0;
uint8_t  first=1;			//--Флаг первого запуска;
uint8_t  run=1,cmdRun=0; 	//--Флаг для внешнего запуска отправки транзакции;
int32_t  agoVar,var;		//--Предыдущее значение выводимой переменной;		   
};
//##################################################################################################
