//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//						БИБЛИОТЕКА ДЛЯ РАБОТЫ С ETHERNET_NTP
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ifndef  RT_HW_ETHERNET_SERVER_h
#define  RT_HW_ETHERNET_SRRVER_h
//-------------------------------------------------------------------------------------------------
#include "RT_HW_BASE.h"										//--Подключение базовой библиотеки;
#include "flprogEthernet.h"           						//--Подключение библиотеки Ethernet FLProg; 
#define  RT_HW_ETHERNET_SERVER_VER 		(uint8_t)102		//--Номер версии;
#define  RT_HW_ETHERNET_SERVER_VER_NAME "1.0.0 01.01.2024"	//--Наименование версии;
//-------------------------------------------------------------------------------------------------
         	1.КЛАСС RT_HW_ETHERNET_NTP
//=================================================================================================
class RT_HW_ETHERNET_SERVER{
public:
//-------------------------------------------------------------------------------------------------
//						1.1.Структуры
//------------------------------------------------------------------------------------------------- 
RT_HW_STRUCT_TIME 		checkDIR;		//--1.2.Данные для функции задержки в функции RT_HW_Base.checkDelayMS(RT_HW_STRUCT_TIME     &id);
//-------------------------------------------------------------------------------------------------
//						1.2.Параметры пользовательских настроек 
//-------------------------------------------------------------------------------------------------
uint8_t serverStatus;
uint8_t serverCodeError;
//-------------------------------------------------------------------------------------------------
//						1.3.Получаемые от сервера данные времени
//-------------------------------------------------------------------------------------------------
//uint32_t time1900;          			//--3.1.Время в сек от 01.01.1900г.;
//uint32_t timeUNIX;          			//--3.2.Время в сек от от 01.01.1970г.;
//uint32_t vr;							//--3.3.Рабочая переменная;
//uint8_t  hour,min,sec;      			//--3.4.Время:часы,минуты,секунды;
//uint8_t  day,month,year,firstYear;      //--3.5.Дата: день,месяц,год-две младших цифры, год -первые две старших цифры;
//-------------------------------------------------------------------------------------------------
//						1.4.Параметры управления
//-------------------------------------------------------------------------------------------------
uint8_t  custom=0;        				//--4.1.Флаг настройки параметров; 
uint8_t  dir=0, agoDir=255;				//--4.2.Этапы управляющей задачи;;
//uint8_t  run=1;            				//--4.3.Флаг для старта запуска запроса;
//uint8_t  ok;              				//--4.4.Device ok;
//uint8_t  fresh;           				//--4.5.Флаг обновленных данных;
uint8_t  codeError;						//--4.6.Код ошибки;
//uint8_t  stateUDP;						//--4.7.Состояние UDP;
uint8_t  freshDir=255;           		//--4.5.Флаг обновленных данных;
//-------------------------------------------------------------------------------------------------
//uint8_t  cntLoopMess=0;					//--Счетчик периодичности выполнения вывода сообщений в циклах loop();
//uint16_t cntRequest=0, cntResponse=0;   //--10.Счетчики запросов и ответов;
//uint16_t getDataQnt=0;               	//--11.Кол-во принятых байт;
uint32_t timeBegin,timeEnd;				//--12.Рабочие параметры для работы со временем;
//uint8_t  packetBuffer[RT_HW_ETHERNET_NTP_PACKET_SIZE]; 	//--Буфер для хранения входящих и исходящих пакетов;
//------------------------------------------------------------------------------------------------  
uint8_t  codeMess=0;					//--15.Код диагностического сообщения
uint16_t cntMess=0;						//--1							
//uint8_t  idx;							//--16.Рабочий индекс;
//uint8_t  bf8;

//=================================================================================================
//                   	2.1.Функция: Управления обменом c NTP-сервером
//=================================================================================================
void  directServerEth(FLProgEthernetServer &id, uint8_t &expRun){
//-------------------------------------------------------------------------------------------------
//				1.250 Статическая задержка в ms
//-------------------------------------------------------------------------------------------------
if(dir==250) {if(RT_HW_Base.checkDelayMS(checkDIR)) {return;} dir=checkDIR.pointTime; return;}	//--Задержка в ms;
//-------------------------------------------------------------------------------------------------
//				1.000.Настройка параметров
//-------------------------------------------------------------------------------------------------
if(dir==0){
custom=1;
if(custom==0){return;}		//--Ожидание настройки параметров;										
checkDIR.pointTime=20;  checkDIR.sizeDelay=10;	dir=250;	return;}	//--Переход по результатам настройки после задержки (ms);
//-------------------------------------------------------------------------------------------------
//              1.020.Подготовка к запуску
//-------------------------------------------------------------------------------------------------
if(dir==20){
  if(!id.connected()){return;}
  if(!id.available()){return;}	
  bitSed(codeMess,0);			//--Вывод сообщения "Подключение клиента;
dir=30;}
//-------------------------------------------------------------------------------------------------
//            	1.020.Отправка запроса
// Состояние stateUDP: 0-ошибка; 1-успешно; 2-ожидание;
//-------------------------------------------------------------------------------------------------
if(dir==30){	
checkDIR.pointTime=40; 			checkDIR.sizeDelay=1000;			dir=250; return;}	//--Возврат на проверку ответа через 10ms; 
//-------------------------------------------------------------------------------------------------
//           	1.030.Ожидание ответа
//-------------------------------------------------------------------------------------------------
if(dir==40){
//-------------------------------------------------------------------------------------------------
checkDIR.pointTime=dir; checkDIR.sizeDelay=10; 						dir=250; return;}	//--Возврат на проверку ответа через 10ms; 
//-------------------------------------------------------------------------------------------------
//             1.040.Чтение ответа
//-------------------------------------------------------------------------------------------------
if(dir==50){ 
dir=10; return;}                                             //--Возврат на новый запрос к серверу NTP;  
//-------------------------------------------------------------------------------------------------
};
//=================================================================================================
//                   	2.2.Функция: Вывод по изменению номера текущего этапа(для тестирования программного обеспечения);
//=================================================================================================
void checkDirNtpEth(){if(agoDir!=dir){agoDir=dir; RT_HW_Base.consoleTest(String(F("NTP->dir")),dir,'E','U');}};

//=================================================================================================
//                   	2.3.Функция вспомогательная: вывод стандартного заголовка
//=================================================================================================
void  headServerEth(FLProgEthernetServer &id){
  id.println("HTTP/1.1 200 OK");
  id.println("Content-Type: text/html");
  id.println("Connection: close");
  id.println("Refresh: 5");
  id.println();
  id.println("<!DOCTYPE HTML>");
  id.println("<html>");
}
//=================================================================================================
//                 		2.3.Функция: Вывод сообщений функции directNTP() (для тестирования оборудования и сервера NTP);
//=================================================================================================
void messServerEth(uint8_t vPeriodMessLoop=0){
if(++cntLoopMess<vPeriodMessLoop){return;} cntLoopMess=0;
if(!RT_HW_Base.console.ok)       {return;}
if(codeMess==0)                  {return;} 		//--Ожидание номера сообщения;
cntMess++;                                      //--Увеличение счетчика выводимого сообщения;
//-------------------------------------------------------------------------------------------------
RT_HW_Base.consoleTest(String(F("NTP")),cntMess,'~','U'); 
RT_HW_Base.consoleBlank(7);
//-------------------------------------------------------------------------------------------------
if(codeMess==1){ RT_HW_Base.consoleVar (String(F(" Начало теста v.01 19.08.23г."))); 
                 RT_HW_Base.consoleTest(String(F(" Watch-dog ответов(сек)")),(uint16_t)(periodWD/1000),'E'); 
                 codeMess=0; return;}  
//-------------------------------------------------------------------------------------------------
if(codeMess==2){ RT_HW_Base.consoleVar(String(F(" Запрос в NTP сервер.")),'L'); 
                 codeMess=0; return;}  
//-------------------------------------------------------------------------------------------------
if(codeMess==3){ RT_HW_Base.consoleVar(String(F(" Завершение по тайм-ауту ответа от NTP сервера.")),'L'); 
                 codeMess=0; return;}   
//-------------------------------------------------------------------------------------------------
if(codeMess==4){ RT_HW_Base.consoleVar(String(F(" Greenwich +0:")));       RT_HW_Base.consoleVar(char(' '));                //--Вывод заголовка;                
                 RT_HW_Base.consoleVar(String(F(" +")));                   RT_HW_Base.consoleVar(RT_HW_Base.unixID.timeUNIX,':');   //--Вывод заголовка;
                                                                           RT_HW_Base.consoleVar(char(' '));              
                 RT_HW_Base.consoleTest(String(F(" Packet")),cntResponse,  '/'); RT_HW_Base.consoleVar(cntRequest,';');                        
                 RT_HW_Base.consoleTest(String(F(" Unix")),  timeUNIX, '~');   //--Вывод UNIX времени (с 01.01.1970)
				 RT_HW_Base.consoleCR();
				 codeMess=0; return;}                                
//------------------------------------------------------------------------------------------------
                 RT_HW_Base.consoleTest(String(F(" Неизвестное тестовое сообщение")),codeMess,'E');  
                 RT_HW_Base.consoleCR(); 
                 codeMess=0; return;                  
};
//=================================================================================================
};  //---END class RT_HW_ETHERNET_NTP
#endif //---RT_HW_ETHERNET_h
//=================================================================================================
