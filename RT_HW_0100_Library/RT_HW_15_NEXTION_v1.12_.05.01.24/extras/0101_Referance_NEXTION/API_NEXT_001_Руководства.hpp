//=================================================================================================
//
//=================================================================================================
//		Структура данных для каждого устройства - 
//			все данные хранятся в массиве RT_HW_NEXT_DEVICE_ID *ptr[RT_HW_NEXT_MAX_DEVICE+1],
//			создаваемом при создании класса RT_HW_NEXT.
//    Переводится из RT_HW_NEXT_STATE_READY в RT_HW_NEXT_STATE_BUSY специальной функцией, если число транзакций за один вход
//	  в задачу (для FLProg это плата) превышает заданное кол-во (например 3). Это делается для снижение вероятности переполнения
//	  кольцевого буферa UART и снижения временных задержек от задачи.
//	  В рабочем режиме при входе в задачу состояние всегда сбрасывается в RT_HW_NEXT_STATE_READY.  
//	num - уникальный номер устройства, назначаемый при инциализации (от 1 до RT_HW_NEXT_MAX_DEVICE(default=8).
//		  Если при инциализации выявляется недопустимая совокупность условий и параметров (недопустимый uart, все номера заняты и пр.),
//		  параметру присвативается значение =0;
//	uart,speed-номер и скорость настройки выбранного UART;
//  blink-битовое периодически(default=50mc) меняющий значение параметр;
//  Blink-битовое периодически(каждые 20 раз по счетчику Cnt(максиум=63) при смене blink->default=1000mc) меняющий значение параметр; 
//  event - событие по изменению blink;
//	Event - событие по изменени  Blink;
//  dir   - номер этапа для функции управления устройтством.
//  cntPack-Счетчик отправленных кол-во пакетов за одно вхождение в задачу и его ограничение;
//  cntNax -Ограничение кол-во пакетов, отправленных за одно вхождение в задачу;
//  err   - код ошибки (0-7) при работе с устройством
//  *** Примечание. Все параметры инициализируются конструктором.

//  Протокол передачи MCU->Nextion (все поля в текстовой форме):
//  "in"	- заголовок посылки;
//  "xx"    - номер регистра куда записывается значение. В Nextion эта переменная должна быть определена в разделе Program.s.
//				Пример: //--Переменные входные
//						int  in0,   in1,  in2, in3,  in4,   in5,  in6,  in7,  in8,  in9
//				В Nextion (v.1.63.3) используется только один формат переменных - int, что соответствует int32_t.
// "="		- знак равно
// "Целое число" - передаваемое число.

//  Протокол передачи Nextion->MCU:
//  0x3A	- (byte) идентификатор начала посылки;
//	func	- (byte) код функции: 	0x06, отправка регистров из byte массива;
//									0x16, отправка регистров из word массива;
//									0x26, отправка регистров из long массива;
//  adr		- (word) адрес первого  регистра передаваемого массива;
//  qnt		- (byte) кол-во передаваемых регистров;
//  xx,xx...- (byte,word,long) - массив передаваемых регистров;
//  crc 	- контрольная сумма;
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++